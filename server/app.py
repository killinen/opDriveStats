from pathlib import Path

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates

from .data import repository

app = FastAPI(
    title='Engagement Gauge API',
    description='Serve engagement statistics generated by engagement_gauge_dev.py',
    version='0.1.0',
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_methods=['*'],
    allow_headers=['*'],
)


templates = Jinja2Templates(directory=str(Path(__file__).resolve().parent / 'templates'))


@app.get('/health', summary='Health check')
def health() -> dict:
    return {'status': 'ok', 'last_loaded': repository.last_updated()}


@app.get('/devices', summary='List devices with engagement summaries')
def list_devices() -> dict:
    summaries = repository.device_summaries()
    return {
        'devices': summaries,
        'count': len(summaries),
        'last_loaded': repository.last_updated(),
        'data_source': str(repository.db_path),
    }


@app.get('/devices/{device_id}', summary='Detailed metrics for a specific device')
def device_details(device_id: str) -> dict:
    drives = repository.drives_for_device(device_id)
    if not drives:
        raise HTTPException(status_code=404, detail=f'Device {device_id} not found')

    summary = repository.device_summary(device_id)
    return {
        'device': summary,
        'drives': repository.format_drive_details(drives),
        'last_loaded': repository.last_updated(),
    }


@app.get('/stats', summary='CLI-style engagement summary', response_class=HTMLResponse)
def stats_view(request: Request) -> HTMLResponse:
    summary_text = repository.cli_summary(include_device_columns=False)
    return templates.TemplateResponse('stats.html', {'request': request, 'summary': summary_text})


@app.get('/stats_mod', summary='Modern engagement dashboard', response_class=HTMLResponse)
def stats_mod_view(request: Request) -> HTMLResponse:
    summaries = repository.device_summaries()
    devices = []
    for summary in summaries:
        device_id = summary.get('device_id')
        drives = repository.format_drive_details(repository.drives_for_device(device_id))
        devices.append({
            'summary': summary,
            'drives': drives,
        })

    context = {
        'request': request,
        'devices': devices,
        'last_loaded': repository.last_updated(),
    }
    return templates.TemplateResponse('stats_mod.html', context)
